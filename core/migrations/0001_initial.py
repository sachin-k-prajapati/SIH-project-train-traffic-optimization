# Generated by Django 5.2.6 on 2025-09-14 08:46

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('length_km', models.FloatField()),
                ('capacity', models.IntegerField(help_text='Maximum concurrent trains')),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('current_weather', models.CharField(choices=[('clear', 'Clear'), ('rain', 'Rain'), ('fog', 'Fog'), ('storm', 'Storm')], default='clear', max_length=50)),
                ('visibility_km', models.FloatField(default=10.0)),
                ('temperature_celsius', models.FloatField(default=25.0)),
                ('is_active', models.BooleanField(default=True)),
                ('maintenance_window_start', models.DateTimeField(blank=True, null=True)),
                ('maintenance_window_end', models.DateTimeField(blank=True, null=True)),
                ('current_throughput', models.FloatField(default=0, help_text='Trains per hour')),
                ('avg_delay_minutes', models.FloatField(default=0)),
                ('utilization_percent', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='PredictionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('prediction_type', models.CharField(choices=[('delay', 'Delay Prediction'), ('throughput', 'Throughput Prediction'), ('congestion', 'Congestion Prediction'), ('maintenance', 'Maintenance Prediction')], max_length=50)),
                ('predicted_value', models.FloatField()),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('prediction_horizon_hours', models.IntegerField(default=1)),
                ('model_version', models.CharField(default='v1.0', max_length=50)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.section')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='KPIRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('throughput_trains', models.IntegerField()),
                ('avg_delay_minutes', models.FloatField()),
                ('punctuality_percent', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('utilization_percent', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('avg_speed_kmh', models.FloatField(default=0.0)),
                ('fuel_efficiency', models.FloatField(default=0.0, help_text='Fuel consumed per km')),
                ('passenger_satisfaction', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('safety_incidents', models.IntegerField(default=0)),
                ('co2_emissions_kg', models.FloatField(default=0.0)),
                ('noise_level_db', models.FloatField(default=0.0)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.section')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Segment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('length_km', models.FloatField()),
                ('sequence', models.IntegerField()),
                ('max_speed', models.IntegerField(help_text='Maximum speed in km/h')),
                ('has_siding', models.BooleanField(default=False)),
                ('gradient_percent', models.FloatField(default=0.0, help_text='Track gradient')),
                ('curve_radius_m', models.IntegerField(blank=True, help_text='Minimum curve radius', null=True)),
                ('electrified', models.BooleanField(default=True)),
                ('is_blocked', models.BooleanField(default=False)),
                ('block_reason', models.CharField(blank=True, max_length=200)),
                ('current_occupancy', models.IntegerField(default=0)),
                ('max_occupancy', models.IntegerField(default=1)),
                ('platform_count', models.IntegerField(default=0)),
                ('signal_count', models.IntegerField(default=2)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='segments', to='core.section')),
            ],
            options={
                'ordering': ['section', 'sequence'],
            },
        ),
        migrations.CreateModel(
            name='Train',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('train_id', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('train_type', models.CharField(choices=[('express', 'Express'), ('local', 'Local'), ('freight', 'Freight'), ('special', 'Special'), ('maintenance', 'Maintenance')], max_length=20)),
                ('priority', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('length_m', models.IntegerField()),
                ('max_speed', models.IntegerField()),
                ('scheduled_arrival', models.DateTimeField(blank=True, null=True)),
                ('scheduled_departure', models.DateTimeField(blank=True, null=True)),
                ('actual_arrival', models.DateTimeField(blank=True, null=True)),
                ('actual_departure', models.DateTimeField(blank=True, null=True)),
                ('current_status', models.CharField(choices=[('scheduled', 'Scheduled'), ('running', 'Running'), ('delayed', 'Delayed'), ('stopped', 'Stopped'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('emergency', 'Emergency Stop')], default='scheduled', max_length=20)),
                ('current_speed', models.IntegerField(default=0, help_text='Current speed in km/h')),
                ('current_position_km', models.FloatField(default=0.0)),
                ('passenger_count', models.IntegerField(default=0)),
                ('cargo_weight_tons', models.FloatField(default=0.0)),
                ('fuel_level_percent', models.FloatField(default=100.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('driver_name', models.CharField(blank=True, max_length=100)),
                ('crew_count', models.IntegerField(default=2)),
                ('current_segment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.segment')),
            ],
        ),
        migrations.CreateModel(
            name='Signal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('position_km', models.FloatField()),
                ('signal_type', models.CharField(choices=[('main', 'Main Signal'), ('distant', 'Distant Signal'), ('junction', 'Junction Signal'), ('starter', 'Starter Signal'), ('advanced_starter', 'Advanced Starter')], max_length=20)),
                ('current_state', models.CharField(choices=[('green', 'Green - Proceed'), ('yellow', 'Yellow - Caution'), ('red', 'Red - Stop'), ('flashing_yellow', 'Flashing Yellow - Prepare to Stop'), ('maintenance', 'Under Maintenance')], default='green', max_length=20)),
                ('last_state_change', models.DateTimeField(auto_now=True)),
                ('auto_control', models.BooleanField(default=True)),
                ('segment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signals', to='core.segment')),
                ('controlled_by_train', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.train')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceLock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_type', models.CharField(choices=[('segment', 'Segment'), ('signal', 'Signal'), ('platform', 'Platform')], max_length=20)),
                ('resource_id', models.IntegerField()),
                ('locked_at', models.DateTimeField(auto_now_add=True)),
                ('released_at', models.DateTimeField(blank=True, null=True)),
                ('lock_reason', models.CharField(default='Normal operation', max_length=200)),
                ('train', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.train')),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('length_m', models.IntegerField()),
                ('can_cross', models.BooleanField(default=False)),
                ('is_occupied', models.BooleanField(default=False)),
                ('occupation_start', models.DateTimeField(blank=True, null=True)),
                ('expected_departure', models.DateTimeField(blank=True, null=True)),
                ('segment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='platforms', to='core.segment')),
                ('occupied_by_train', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.train')),
            ],
        ),
        migrations.CreateModel(
            name='EmergencyEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('accident', 'Accident'), ('fire', 'Fire'), ('medical', 'Medical Emergency'), ('security', 'Security Threat'), ('equipment_failure', 'Equipment Failure'), ('natural_disaster', 'Natural Disaster'), ('power_outage', 'Power Outage')], max_length=30)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('description', models.TextField()),
                ('response_actions', models.TextField(blank=True)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.section')),
                ('segment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.segment')),
                ('affected_trains', models.ManyToManyField(blank=True, to='core.train')),
            ],
        ),
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('decision_type', models.CharField(choices=[('precedence', 'Train Precedence'), ('crossing', 'Crossing Priority'), ('hold', 'Hold Train'), ('reroute', 'Reroute Train'), ('speed_limit', 'Speed Restriction'), ('emergency', 'Emergency Action'), ('maintenance', 'Maintenance Window'), ('platform_change', 'Platform Change')], max_length=30)),
                ('recommended_action', models.TextField()),
                ('explanation', models.TextField()),
                ('confidence_level', models.CharField(choices=[('very_high', 'Very High (>90%)'), ('high', 'High (80-90%)'), ('medium', 'Medium (60-80%)'), ('low', 'Low (40-60%)'), ('very_low', 'Very Low (<40%)')], default='medium', max_length=20)),
                ('expected_benefit', models.TextField(blank=True, help_text='Expected time savings, throughput improvement, etc.')),
                ('is_implemented', models.BooleanField(default=False)),
                ('implemented_at', models.DateTimeField(blank=True, null=True)),
                ('manual_override', models.BooleanField(default=False)),
                ('override_reason', models.TextField(blank=True)),
                ('algorithm_used', models.CharField(choices=[('heuristic', 'Heuristic'), ('ilp', 'ILP'), ('ml', 'Machine Learning')], default='heuristic', max_length=50)),
                ('computation_time_ms', models.FloatField(default=0.0)),
                ('trains_involved', models.ManyToManyField(to='core.train')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TrainEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('enter_section', 'Enter Section'), ('enter_segment', 'Enter Segment'), ('pass_signal', 'Pass Signal'), ('stop', 'Stop'), ('depart', 'Depart'), ('clear_segment', 'Clear Segment'), ('clear_section', 'Clear Section'), ('emergency_stop', 'Emergency Stop'), ('speed_restriction', 'Speed Restriction'), ('maintenance_halt', 'Maintenance Halt'), ('weather_delay', 'Weather Delay'), ('fuel_stop', 'Fuel Stop'), ('crew_change', 'Crew Change')], max_length=30)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.JSONField(default=dict)),
                ('speed_at_event', models.IntegerField(default=0)),
                ('position_km', models.FloatField(default=0.0)),
                ('delay_minutes', models.FloatField(default=0.0)),
                ('platform', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.platform')),
                ('segment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.segment')),
                ('signal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.signal')),
                ('train', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.train')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='WeatherCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('temperature', models.FloatField()),
                ('humidity_percent', models.FloatField()),
                ('wind_speed_kmh', models.FloatField()),
                ('precipitation_mm', models.FloatField(default=0.0)),
                ('visibility_km', models.FloatField()),
                ('weather_type', models.CharField(max_length=50)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.section')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
    ]
